# üîµ Gera√ß√£o de Documentos

Embora seja um processo do backend, a gera√ß√£o de documentos exige separa√ß√£o das demais componentes e tem consider√°vel complexidade. Por esse motivo, tratamos essa parte de forma independente.

A gera√ß√£o dos relat√≥rios deve ser realizada em um formato que permite edi√ß√£o pelo google docs (`.docx`ou `.odt`). Devido as dificuldades de utilizar um sistema windows para realizar automa√ß√µes com o *microsft word* optou-se por realizar a gera√ß√£o dos documentos no formato `.odt` com o aux√≠lio do LibreOffice. 

O LibreOffice possu√≠ uma interface/API interna com Python, chamada [UNO](https://api.libreoffice.org/), que permite automa√ß√£o direta de documentos `.odt`.


## üî∑ Stack e depend√™ncias

Tecnologias Utilizadas 

- `Python`: Linguagem de programa√ß√£o Python, com interpretador fornecido pelo pacote LibreOffice
- `FastAPI`: Framework Python para desenvolvimento de servidores backend
- `py3o`: Biblioteca Python para edi√ß√£o e templating de documentos `.odt`.
- `UNO`: API do LibreOffice com python para edi√ß√£o de documentos `.odt`.

--- 

## üî∑ Estrutura
A gera√ß√£o de relat√≥rio segue uma l√≥gica relativamente simples. 

### üîπ1. Template
Para gerar o relat√≥rio se define um template base em `.odt` que cont√©m eles como:
- Formata√ß√£o
- Cabe√ßalho 
- Rodap√© 
- Numera√ß√£o de P√°ginas

Nesse template definimos onde e como as informa√ß√µes ser√£o substitu√≠das. Para isso, utiliza-se o padr√£o definido pela biblioteca `py3o` que pode ser consultado [aqui](https://py3otemplate.readthedocs.io/en/latest/templating.html). De forma geral:
- Estruturas (como `if` e `for`) s√£o escritas utilizando hyperlinks
- Vari√°veis para substitui√ß√£o s√£o escritas utilizando vari√°veis do LibreOffice (acess√≠veis por `CTLR+F2`).

**OBS:** Note que essa biblioteca, diferente de outras da √°rea, n√£o utiliza JINJA2 para templatting. 


#### üîπ2. `py3o`
Dentro do servi√ßo `replaceDocument.py` define-se o c√≥digo python, utilizando a biblioteca `py3o` que substitui as informa√ß√µes retiradas do banco de dados no documento. 

Uma vez que esse documento √© gerado, pela fun√ß√£o `createDocument`, toda a informa√ß√£o armazenada no banco de dados, extra√≠da do relat√≥rio armazenado como JSON, √© substitu√≠da no documento.

Entretanto, duas estruturas deixam de funcionar:
1. Sum√°rio
2. Numera√ß√£o Autom√°tica
Ambas s√£o funcionalidades do pr√≥prio leitor de arquivos (seja Office, google docs ou como nesse caso LibreOffice). Por esse motivo, elas n√£o atualizam apenas peal edi√ß√£o do documento.


#### üîπ3. LibreOffice
Para atualizar os campos discutidos anteriormente, utilizamos uma integra√ß√£o com o Libreoffice pela biblioteca `UNO`. Nela, implementamos dois m√©todos, uma para atualizar o sum√°rio e o outro a numera√ß√£o dos cap√≠tulos. 

Para realizar isso √© necess√°rio utilizar a biblioteca python que possu√≠ uma linguagem bem espec√≠fica, para mais informa√ß√µes acesse a [documenta√ß√£o oficial](https://py3otemplate.readthedocs.io/en/latest/templating.html). 

Entretanto, alguns avisos s√£o bem vindos:
1. Sempre utilize caminhos absolutos dentro da biblioteca UNO
2. Utilize o interpretador python fornecido pelo pr√≥prio LibreOffice, √© a melhor forma de realizar a conex√£o com o UNO

Por motivos como esse √© necess√°rio ter uma instala√ß√£o do LibreOffice empacotada junto com o deploy da aplica√ß√£o. Para que isso seja poss√≠vel sem que altere a execu√ß√£o do `backend` e `frontend` e, em especial, n√£o comprometa a seguran√ßa do site, separa-se essa aplica√ß√£o em um container. Esse container deve ser publicado em conjunto com o `backend`, por√©m eles devem se comunicar, exclusivamente, por uma rede interna. Assim garante-se que o container com o LibreOffice n√£o pode ser acessado externamente. 



## üî∑ Discuss√£o dos M√©todos e Fun√ß√µes

