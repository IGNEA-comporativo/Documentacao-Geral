## üî∑ Modelos de Relat√≥rios
A p√°gina **ModelosRelatorios** gerencia o ciclo de vida de **modelos de relat√≥rios** e a sua rela√ß√£o com **cap√≠tulos**. Permite listar, criar, editar e excluir modelos, al√©m de montar a lista de cap√≠tulos pertencentes a cada modelo (com ordena√ß√£o). A componente **TwoSideList** √© usada **internamente** para manipular os cap√≠tulos de um modelo por arrastar/soltar ou por cliques.

### üîπVis√£o geral do fluxo
1. **Carregamento inicial**  
   - Busca os modelos existentes em `GET /ModelosRelatorios/` e popula `reports`.  
   - Busca os cap√≠tulos dispon√≠veis em `GET /CriadorCapitulos/` e popula `list1` (lado esquerdo da TwoSideList).  
   - `list2` inicia vazia (cap√≠tulos selecionados para o modelo atual).

2. **Cria√ß√£o/Edi√ß√£o do modelo**  
   - O formul√°rio recebe **nome** (`name`) e **descri√ß√£o** (`description`).  
   - A TwoSideList gerencia a sele√ß√£o e a ordem dos cap√≠tulos em `list2`.  
   - **Salvar**:
     - Monta `newReport = { title: name, description }`.
     - Monta `newRelation = { chapters: list2, report_title: name }`.
   - **Atualizar** (`id >= 0`):  
       - `PUT /ModelosRelatorios/{id}` ‚Üí atualiza `reports`;  
       - `PUT /ModelosRelatorios/relation/{id}` ‚Üí atualiza rela√ß√µes cap√≠tulo ‚Üî modelo.
   - **Criar** (`id < 0`):  
       `POST /ModelosRelatorios/` ‚Üí adiciona ao `reports`;  
       `POST /ModelosRelatorios/relation/` ‚Üí cria rela√ß√£o cap√≠tulo ‚Üî modelo.
   - Em sucesso, define mensagem de sucesso e limpa o formul√°rio/sele√ß√µes.  
   - Em erros:
     - `409`: nome do modelo j√° existe.
     - `400`: nome do modelo ausente.

3. **Edi√ß√£o de um modelo existente**  
   - Ao selecionar **editar**, define `id`, `name`, `description`.  
   - Busca rela√ß√µes via `GET /ModelosRelatorios/relation/{name}` ‚Üí popula `list2`.  
   - Recalcula `list1` removendo itens presentes em `list2`.

4. **Exclus√£o**  
   - `DELETE /ModelosRelatorios/{id}` ‚Üí remove o modelo de `reports`.

### üîπVari√°veis do modelo 

| Chave            | Tipo   | Descri√ß√£o                                                                |
| ---------------- | ------ | ------------------------------------------------------------------------ |
| `reports`        | Array  | Modelos cadastrados (lista apresentada com a√ß√µes de editar/excluir).     |
| `list1`          | Array  | Cap√≠tulos **dispon√≠veis** (esquerda da TwoSideList).                     |
| `list2`          | Array  | Cap√≠tulos **selecionados** para o modelo atual (direita da TwoSideList). |
| `name`           | String | Nome do modelo (enviado como `title`).                                   |
| `description`    | String | Descri√ß√£o opcional do modelo.                                            |
| `id`             | Number | Sentinela de edi√ß√£o: `-1` para cria√ß√£o, `>= 0` para atualiza√ß√£o.         |
| `errorMessage`   | String | Mensagem de erro (exibida por `NotificationComp`).                       |
| `successMessage` | String | Mensagem de sucesso (exibida por `NotificationComp`).                    |

> Os itens de cap√≠tulo manipulados em `list1`/`list2` incluem ao menos `id` e `title`. Na lista da direita, h√° um campo de entrada ligado a `element.position`, permitindo registrar a posi√ß√£o/ordem do cap√≠tulo no modelo.

### üîπContrato com o backend
- **Listar modelos**: `GET /ModelosRelatorios/` ‚Üí `reports: Array`.  
- **Listar cap√≠tulos dispon√≠veis**: `GET /CriadorCapitulos/` ‚Üí `list1: Array`.  
- **Criar modelo**: `POST /ModelosRelatorios/` com `{ title, description }`.  
- **Atualizar modelo**: `PUT /ModelosRelatorios/{id}` com `{ title, description }`.  
- **Rela√ß√µes cap√≠tulo ‚Üî modelo (criar)**: `POST /ModelosRelatorios/relation/` com `{ chapters: list2, report_title: name }`.  
- **Rela√ß√µes cap√≠tulo ‚Üî modelo (atualizar)**: `PUT /ModelosRelatorios/relation/{id}` com `{ chapters: list2, report_title: name }`.  
- **Obter rela√ß√µes de um modelo**: `GET /ModelosRelatorios/relation/{name}` ‚Üí popula `list2`.  
- **Excluir modelo**: `DELETE /ModelosRelatorios/{id}`.

---

### üîπM√©todos 

#### üî∏`created() -> Promise<void>`
<blockquote>

**Descri√ß√£o**: carrega `reports` e `list1` com chamadas iniciais aos endpoints de modelos e cap√≠tulos.  
**Retorno**: `Promise<void>`.
</blockquote>

#### üî∏`resetFields() -> void`
<blockquote>

**Descri√ß√£o**: limpa `name`, `description` e `id`, e restaura as listas (`list1` recebe de volta os itens de `list2`, `list2` √© esvaziada).  
**Retorno**: `void`.
</blockquote>

#### üî∏`salvarCapitulo() -> Promise<void>`
<blockquote>

**Descri√ß√£o**: cria ou atualiza o modelo atual e persiste as rela√ß√µes cap√≠tulo ‚Üî modelo com base em `id`.  
**Entradas**: estado interno (`name`, `description`, `list2`, `id`).  
**Retorno**: `Promise<void>`.  
</blockquote>

#### üî∏`editReport(report) -> Promise<void>`
<blockquote>

**Descri√ß√£o**: entra em modo de edi√ß√£o de um modelo. Seta `id`, `name`, `description` e busca as rela√ß√µes para popular `list2`, filtrando `list1` para n√£o conter cap√≠tulos j√° selecionados.  
**Par√¢metros**: `report` (nome do modelo).  
**Retorno**: `Promise<void>`.
</blockquote>

#### üî∏`onDelete(report) -> Promise<void>`
<blockquote>

**Descri√ß√£o**: remove o modelo do backend e sincroniza `reports`.  
**Par√¢metros**: `report` (nome do modelo).  
**Retorno**: `Promise<void>`.

</blockquote>



## üî∑ TwoSideList (interno a ModelosRelatorios)

Componente interno respons√°vel por **selecionar** e **ordenar** cap√≠tulos de um modelo. Trabalha com duas listas controladas: `list1` (dispon√≠veis) e `list2` (selecionados). Suporta **arrastar e soltar** entre listas e **movimento por clique**.

### üîπVari√°veis do modelo 
- **Props controladas**: `list1: Array`, `list2: Array`.  
- **Emiss√£o de estado**: `update:list1`, `update:list2` (para suportar `v-model:list1` / `v-model:list2`).  
- **Campos dos itens**: `id`, `title`; na lista da direita, o campo `position` √© edit√°vel (`v-model="element.position"`), permitindo registrar a ordem.

### üîπVis√£o geral do fluxo
- **Mover para a direita** (`moveToRight(item)`)  
  Remove `item` de `list1` e o anexa ao fim de `list2`. Emite `update:list1` e `update:list2`.
- **Mover para a esquerda** (`moveToLeft(item)`)  
  Remove `item` de `list2` e o devolve a `list1`. Emite `update:list1` e `update:list2`.
- **Arrastar/soltar**  
  A troca dentro e entre listas √© habilitada pelo `draggable`, e o componente exp√µe um *handler* de log (`log(evt)`) para depura√ß√£o.
- **Altura das caixas**  
  Calculada para manter alinhamento visual entre as duas listas:
  - `maxCount = Math.max(list1.length, list2.length)`.
  - `itemHeightPx`: ajusta conforme a presen√ßa do campo de entrada na lista da direita.
  - `listBoxHeight = headerHeightPx + maxCount * itemHeightPx`.