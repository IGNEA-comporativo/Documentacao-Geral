## üî∑ √Årea de Trabalho

A componente **AreaDeTrabalho** centraliza o fluxo de trabalho de gera√ß√£o e edi√ß√£o de conte√∫do de cap√≠tulos pertencentes a um **modelo de relat√≥rio** previamente definido. Ele orquestra duas componentes internas ‚Äî **InputFields** (entradas de arquivos/links) e **PromptFields** (prompt e a√ß√µes de gera√ß√£o) ‚Äî e coordena salvamento, auto-salvamento e gera√ß√£o de texto via backend. A p√°gina opera sobre um **modelo selecionado** e seus **cap√≠tulos**, permitindo alternar cap√≠tulos, editar o texto, anexar insumos e persistir o estado.

O bot√£o `Recarregar √öltimo Relat√≥rio` recarrega o √∫ltimo relat√≥rio n√£o completo salvo no banco de dados.
- Essa foi a alternativa encontrada para salvar o estado de edi√ß√£o de um relat√≥rio, uma vez que n√£o h√° um p√°gina dedicada a edi√ß√£o de cada relat√≥rio, e sim uma p√°gina geral com seletor de modelos. 

A inser√ß√£o de imagens no texto gerado pela IA ainda n√£o foi implementando. 

### üîπVis√£o geral do fluxo
1. **Sele√ß√£o de modelo**  
   O usu√°rio seleciona um modelo de relat√≥rio. A listagem de cap√≠tulos √© atualizada para refletir aquela do modelo selecionado (`selectedModel`). 

   Uma lista com todos os modelos dispon√≠veis √© carregada na mem√≥ria e guardada na vari√°vel `models`.
2. **Sele√ß√£o de cap√≠tulo**  
   O usu√°rio escolhe um cap√≠tulo do modelo. A √°rea de edi√ß√£o passa a refletir o cap√≠tulo ativo (**`selectedChapter`**), incluindo texto atual e insumos associados.
3. **Edi√ß√£o e insumos**  
   - **Texto**: edi√ß√£o direta no editor do cap√≠tulo ativo.  
   - **Valores**: **InputFields** emite mudan√ßas de arquivos/links; o componente pai associa esses valores ao cap√≠tulo ativo.
4. **Salvar**  
   A a√ß√£o de salvar consolida o estado do cap√≠tulo ativo no backend. O componente atualiza a lista local e marca o cap√≠tulo como ‚Äúpreenchido‚Äù quando aplic√°vel.

   Marca as circunfer√™ncias ao lado de cada cap√≠tulo com um "check", indicando que a aquele cap√≠tulo j√° foi conclu√≠do.
5. **Auto-salvar**  
   Em intervalos/a√ß√µes espec√≠ficas, o componente executa um **auto-salvamento sequencial** percorrendo os cap√≠tulos do modelo, reduzindo o risco de perda de dados.
6. **Gerar texto (IA)**  
   A partir do **prompt** atual (fornecido por **PromptFields**) e do contexto do cap√≠tulo, o componente solicita ao backend a gera√ß√£o de texto. Antes de gerar, for√ßa um **salvar** do cap√≠tulo para garantir consist√™ncia. Em retorno, atualiza o texto do cap√≠tulo ativo.

Esse fluxo privilegia **consist√™ncia** (salvar antes de gerar), **previsibilidade** (opera√ß√µes serializadas quando necess√°rio) e **isolamento por cap√≠tulo** (cada cap√≠tulo tem seu pr√≥prio estado).

### üîπVari√°veis do modelo 

| Chave               | Tipo     | Descri√ß√£o                                                                                                   |
|---------------------|----------|-------------------------------------------------------------------------------------------------------------|
| `models`     | Array   | Armazena todos os modelos dispon√≠veis no banco de dados.     
| `selectedModel`     | Object   | Modelo de relat√≥rio ativo. Cont√©m `chapters: Array<Chapter>`.                                              |
| `selectedChapter`   | Object   | Cap√≠tulo atualmente em edi√ß√£o/visualiza√ß√£o.                                                                 |
| `selectedChapterIdx`| Number   | √çndice do cap√≠tulo ativo dentro de `selectedModel.chapters`.                                                |
| `report_title`      | String   | T√≠tulo do modelo (usado em chamadas ao backend).                                                            |
| `generatedReport`      | Bool   | Flag para controlar se o relat√≥rio j√° foi gerado (permiting edi√ß√£o deste)                                  |
| `tempReport`      | Bool   |  Flag para controlar se o relat√≥rio est√° como tempor√°rio (quando ainda n√£o foi salvo com um t√≠tulo) |
| `isGenerating`      | Boolean  | Estado de gera√ß√£o de texto (bloqueia UI quando verdadeiro).                                                 |
| `errorMessage`      | String   | Mensagem de erro exibida por `NotificationComp`.                                                            |
| `successMessage`    | String   | Mensagem de sucesso exibida por `NotificationComp`.                                                         |
| `files`             | Array    | Arquivos anexados ao cap√≠tulo ativo (recebidos de **InputFields**).                                         |
| `links`             | Array    | Links ou refer√™ncias associadas ao cap√≠tulo ativo (recebidos de **InputFields**).                           |
| `saveQueue` | Queue | Queue utilizada para o salvamento do estado |

### üîπContrato com o backend
- **Salvar cap√≠tulo**  
  - **Criar/Atualizar**: `POST /AreaDeTrabalho/` ou `PUT /AreaDeTrabalho/{report_title}`  
    **Payload (exemplo m√≠nimo)**: `{ report_title, chapter_title, text, files?, links? }`  
    **Efeito**: persiste o conte√∫do do cap√≠tulo e seus insumos no contexto do modelo.
- **Gerar texto (IA)**  
  - `GET /AI/tests/{report_title}/{chapter_title}`  
    **Efeito**: retorna texto gerado para o cap√≠tulo; o componente atualiza `selectedChapter.text`.

Tratamento de erros t√≠pico:
- **409**: nomes de relat√≥rios duplicados
- **400**: t√≠tulo ausente


### üîπ‚ùó Observa√ß√µes e Melhorias

#### üî∏Arquivos
Atualmente, tanto os arquivos enviados pelo usu√°rio, quanto aqueles que s√£o regatados de relat√≥rios anteriores incompletos s√£o carregados e salvos em uma vari√°vel no frontend.

Essa escolha de implementa√ß√£o n√£o foi adequada, em especial ao considerar que arquivos de tamanho muito grande podem ser inseridos.
- O frontend sofre uma carga muito elevada devido ao armazenamento dos arquivos.


**Proposta de Solu√ß√£o**
Os arquivos n√£o mais devem ser armazenados no frontend. Assim que o usu√°rio adicionar novos arquivos, eles devem ser enviados de forma ass√≠ncrona para o banco de dados. 

Ao enviar o arquivo o backend deve retornar o seguinte objeto:
```JSON
{<UUID>: <nome_do_arquivo>}
```

Ent√£o o frontend armazena uma lista desses objetos.
- Utiliza-se o valor `<nome_do_arquivo>` para mostrar os arquivos na listagem para o usu√°rio.

Ao carregar arquivos da √∫ltima se√ß√£o, carrega-se apenas a lista de objetos com `UUID` e `nome_do_arquivo`, assim n√£o h√° necessidade de carregar os arquivos do banco de dados apenas para mostr√°-los no frontend. 


#### üî∏Estrutura da √Årea de Trabalho
Atualmente a √°rea de trabalho funciona de forma pouco convencional. N√£o √© poss√≠vel come√ßar a trabalhar em um relat√≥rio, ir para outro, voltar e etc. Al√©m disso, a visualiza√ß√£o fica completamente dependente da p√°gina de resultados.

N√£o h√° um "projeto" no qual se est√° trabalhando, a informa√ß√£o √© totalmente guardada em uma √∫nica p√°gina com muitas fun√ß√µes. Sem a deifini√ß√£o de um projeto, a distin√ß√£o no backend √© mais complexa, assim como no banco de dados. 

Uma estrutura que funcionaria melhor, tanto para o backend + banco de dados (no sentido de salvar e recuperar o estado de gelat√≥rio n√£o finalizados), quanto para a UX seria semelhante a do [overleaf](https://pt.overleaf.com/):

**Proposta de Mudan√ßa**
Mudar a p√°gina principal da √°rea de trabalho a p√°gina de relat√≥rios gerados para um molde de relat√≥rios gerados. Quando voc√™ acessar um relat√≥rio criado ou apertar para criar um novo relat√≥rio voc√™ ser√° redirecionado para uma p√°gina respons√°vel pela edi√ß√£o daquele documento.
- Ao criar o relat√≥rio decidimos o template (o que remove o problema de poder trocar de template no meio da edi√ß√£o de um relat√≥rio)
- Isso permite uma separa√ß√£o entre o que √© menu da p√°gina e edi√ß√£o do documento
- Isso tamb√©m libera mais espa√ßo na p√°gina de edi√ß√£o, o que permite uma repagina√ß√£o mais eficiente 
- O salvamento de estados de edi√ß√£o √© mais direto e claro, tanto no backend quanto no frontend. 

O funcionamento √© semelhante a maioria dos aplicativos de edi√ß√£o de documentos - como o google docs ou o overleaf. 


### üîπM√©todos

#### üî∏`changeChapter(idx: number) -> void`
> **Descri√ß√£o**: torna o cap√≠tulo de √≠ndice `idx` o cap√≠tulo ativo, atualizando `selectedChapter` e `selectedChapterIdx`.  
> 
> Tamb√©m recarrega as imagens e links que eram utilizados nesse relat√≥rio. 
> **Retorno**: `void`.

#### üî∏`reloadLastReport() -> void`
> **Descri√ß√£o**: Executa `GET /AreaDeTrabalho/lastReport` para pegar o √∫ltimo relat√≥rio n√£o completado no banco de dados.
> **Retorno**: `void`.
> 
> #### üî∏`saveChapter(chapter?: Chapter) -> Promise<void>`
> **Descri√ß√£o**: salva o conte√∫do do cap√≠tulo fornecido (ou do cap√≠tulo ativo, se omitido) no backend. Consolida `text`, `files` e `links`.  
> 
> O salvamento do cap√≠tulo autom√°tico ou manual √© adicionado a `saveQueue` e ent√£o processados em ordem. Esse comportamento evita sobreposi√ß√£o de salvamentos. 
> 
> **Par√¢metros**: `chapter` opcional (se ausente, usa `selectedChapter`).  
> **Retorno**: `Promise<void>`.  
> **Efeitos**: atualiza o cap√≠tulo em `selectedModel.chapters`; quando aplic√°vel, define `chapter.filled = true`; em caso de erro, popula `errorMessage`.

#### üî∏`saveReport() -> Promise<void>`
> **Descri√ß√£o**: salva o relat√≥rio gerado ou atualiza um relat√≥rio que j√° foi enviado nessa se√ß√£o.
> **Retorno**: `Promise<void>`.  


#### üî∏`runAutoSave() -> Promise<void>`
> **Descri√ß√£o**: executa auto-salvamento sequencial percorrendo `selectedModel.chapters`, chamando `saveChapter` **com `await`** para cada item.  
> **Retorno**: `Promise<void>`.  

#### üî∏`gerarTexto() -> Promise<void>`
> **Descri√ß√£o**: garante persist√™ncia do cap√≠tulo ativo e solicita gera√ß√£o de texto ao backend.  
> **Fluxo**:  
> 1. Define `isGenerating = true`.  
> 2. Executa `await saveChapter()` para sincronizar estado.  
> 3. Chama `GET /AI/tests/{report_title}/{selectedChapter.title}`.  
> 4. Atualiza `selectedChapter.text` com a resposta.  
> 5. Restaura `isGenerating = false`; define `successMessage`/`errorMessage` conforme o resultado.  
> **Retorno**: `Promise<void>`.

#### üî∏`onFilesChange(files: File[]) -> void`
> **Descri√ß√£o**: manipula o evento emitido por **InputFields** ao alterar anexos; associa `files` ao cap√≠tulo ativo.  
> **Retorno**: `void`.

#### üî∏`onLinksChange(links: Array) -> void`
> **Descri√ß√£o**: manipula o evento emitido por **InputFields** ao alterar links; associa `links` ao cap√≠tulo ativo.  
> **Retorno**: `void`.

--- 

## üî∑ InputFields (interno a AreaDeTrabalho)

Gerencia **insumos** do cap√≠tulo ativo: sele√ß√£o/remo√ß√£o de **arquivos** e captura de **links**. Dispara eventos de altera√ß√£o para o pai (**AreaDeTrabalho**) salva o estado e inclui esses dados em opera√ß√µes de **salvar** e **gerar**.

Aplica um algoritmo de **slugify** para padroniza√ß√£o do nome dos arquivos enviados. Como esse processo √© realizado assim que o arquivo √© carregado, para todos os efeitos (incluindo o banco de dados) o nome do arquivo √© aquele produzido pelo **slugify**. 

### üîπProtocolo de dados
- **Emiss√µes**:  
  - `files-change: File[]` ‚Äî lista completa atualizada de arquivos.  
  - `links-change: Array` ‚Äî cole√ß√£o atualizada de links/refer√™ncias.
- **Comportamento**:  
  - Normaliza√ß√£o de nomes de arquivos com **slugify** antes de emitir.  
  - Limpeza de seletores ap√≥s sele√ß√£o para permitir reenvio do mesmo arquivo.

### üîπComportamento principal
- Adiciona arquivos √† cole√ß√£o atual, emite `files-change`.
- Remove arquivos individuais, emite `files-change`.
- Captura e valida formato b√°sico de links, emite `links-change`.

---

## üî∑ PromptFields (interno a AreaDeTrabalho)

Centraliza o **prompt** usado na gera√ß√£o de texto para o cap√≠tulo ativo e exp√µe a a√ß√£o de **gerar**. Pode incluir visualiza√ß√µes auxiliares (ex.: tamanho do prompt) e bloqueios quando `isGenerating` √© verdadeiro.

### üîπProtocolo de dados
- **Entradas**:  
  - `modelTitle?: string` ‚Äî t√≠tulo do modelo atual (para exibi√ß√£o contextual).  
  - `chapterTitle?: string` ‚Äî t√≠tulo do cap√≠tulo ativo.
- **Emiss√µes**:  
  - `generate` ‚Äî sinaliza ao pai para executar `gerarTexto()` com o estado atual.  
  - `prompt-change: string` ‚Äî texto do prompt atualizado (se o pai persistir/observar o prompt).

### üîπComportamento principal
- Mant√©m o valor do **prompt** corrente do cap√≠tulo ativo.  
- Desabilita controles de gera√ß√£o quando `isGenerating` √© verdadeiro.  
- Ao acionar **Gerar**, emite `generate`; o pai (AreaDeTrabalho) coordena salvar + chamada de IA + atualiza√ß√£o do texto.

