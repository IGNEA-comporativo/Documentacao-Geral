## üî∑ Criador de Cap√≠tulos 
A componente **CriadorCapitulos** gerencia o ciclo de vida de cap√≠tulos da aplica√ß√£o. Ele lista cap√≠tulos existentes, permite criar novos, editar existentes e remover. Fornece feedback de sucesso/erro por meio da **NotificationComp** (via `v-model:errorMessage` e `v-model:successMessage`) e integra-se ao backend por meio de endpoints REST dedicados.

### üîπ Vis√£o geral do fluxo
1. **Carregamento inicial**: ao criar o componente, uma chamada `GET /CriadorCapitulos/` popula a lista local de cap√≠tulos.
2. **Listagem e a√ß√µes**: a UI exibe cada cap√≠tulo com a√ß√µes de **editar** e **excluir**.
3. **Edi√ß√£o/Cria√ß√£o**:
   - **Editar**: o clique em ‚Äúeditar‚Äù preenche o formul√°rio com os dados do cap√≠tulo, definindo o `id` em edi√ß√£o.
   - **Salvar**:
     - Se `id >= 0`: atualiza o cap√≠tulo via `PUT /CriadorCapitulos/{id}`.
     - Se `id < 0`: cria novo cap√≠tulo via `POST /CriadorCapitulos/`.
   - Em sucesso: atualiza o estado local e informa por `successMessage`.
   - Em erro: exibe `errorMessage` conforme o status HTTP.
4. **Remo√ß√£o**: o clique em ‚Äúexcluir‚Äù envia `DELETE /CriadorCapitulos/{id}` e remove o item da lista local.

Esse fluxo centraliza as opera√ß√µes em um √∫nico formul√°rio e utiliza o par√¢metro `id` para alternar entre criar e atualizar.

### üîπVari√°veis do modelo 

| Chave            | Tipo   | Uso principal                                                              |
| ---------------- | ------ | -------------------------------------------------------------------------- |
| `chapters`       | Array  | Cole√ß√£o local de cap√≠tulos exibidos na lista.                              |
| `name`           | String | T√≠tulo do cap√≠tulo no formul√°rio (enviado como `title`).                   |
| `description`    | String | Descri√ß√£o opcional do cap√≠tulo.                                            |
| `prompt`         | String | Prompt associado ao cap√≠tulo.                                              |
| `id`             | Number | Sentinela de edi√ß√£o: `-1` para cria√ß√£o, `>= 0` para edi√ß√£o do cap√≠tulo.    |
| `errorMessage`   | String | Mensagem de erro (bound √† `NotificationComp`).                             |
| `successMessage` | String | Mensagem de sucesso (bound √† `NotificationComp`).                          |
| `li_classes`     | String | Conjunto de classes utilit√°rias aplicado aos itens da lista (estiliza√ß√£o). |


### üîπContrato com o backend
- **Listar**: `GET /CriadorCapitulos/` ‚Üí retorna a lista de cap√≠tulos criados `Chapter[]`.
- **Criar**: `POST /CriadorCapitulos/` com payload `{ title, description, prompt }` ‚Üí retorna `Chapter`.
- **Atualizar**: `PUT /CriadorCapitulos/{id}` com payload `{ title, description, prompt }` ‚Üí retorna `Chapter`.
- **Remover**: `DELETE /CriadorCapitulos/{id}` 


> **Shape de `Chapter` (m√≠nimo utilizado)**: `{ id: number, title: string, description?: string, prompt?: string }`.



### üîπ M√©todos

#### üî∏`async created() -> Promise<void>`
<blockquote>

**Descri√ß√£o**  
Carrega a lista inicial de cap√≠tulos ao iniciar a componente.

**Comportamento**  
- Executa `GET /CriadorCapitulos/`.
- Atribui o resultado a `chapters`.
</blockquote>

#### üî∏`async fetchChapters() -> Promise<void>`
<blockquote>

**Descri√ß√£o**  
Carrega a lista de cap√≠tulos, chamando o backend. 

**Comportamento**  
- Executa `GET /CriadorCapitulos/`.
- Seta `this.chapters` com o resultado.

**Retorno**  
`Promise<void>`
</blockquote>

#### üî∏`async salvarCapitulo() -> Promise<void>`
<blockquote>

**Descri√ß√£o**  
Cria ou atualiza um cap√≠tulo com base no `id` em edi√ß√£o. 
- Ligada a execu√ß√£o do bot√£o de salvar cap√≠tulo. 

**Entrada**  
```json
{ name, description, prompt, id }
```

**Comportamento**  
1. Limpa mensagens (`errorMessage`, `successMessage`).
2. Monta `newChapter = { title: name, prompt, description }` com as informa√ß√µes atualmente na tela. 
3. **Update**: se `id >= 0` (significa que estamos em edi√ß√£o de um cap√≠tulo)  
   - `PUT /CriadorCapitulos/{id}` ‚Üí substitui item correspondente em `chapters`.
4. **Create**: se `id < 0` (significa que √© um cap√≠tulo novo)
   - `POST /CriadorCapitulos/` ‚Üí `push` no array `chapters`.
5. **Reset** do formul√°rio: `name`, `description`, `prompt` e `id = -1`.

**Retorno**  
`Promise<void>`

</blockquote>

#### üî∏`editChapter(chapter: Chapter) -> void`
<blockquote>

**Descri√ß√£o**  
Entra em modo de edi√ß√£o preenchendo o formul√°rio com os dados do cap√≠tulo selecionado.
- Essa a√ß√£o torna `id >= 0`, o que sinaliza a atualiza√ß√£o de cap√≠tulos no m√©todo `salvarCapitulo`.

**Par√¢metros**  
`chapter` ‚Äî objeto `{ id, title, description, prompt }`.

**Comportamento**  
- Seta `id = chapter.id`.
- Seta `name`, `description`, `prompt` com os valores do cap√≠tulo.

**Retorno**  
`void`
</blockquote>

#### üî∏`onDelete(id: number) -> Promise<void>`
<blockquote>

**Descri√ß√£o**  
Remove o cap√≠tulo identificado por `id` no backend e sincroniza a lista local.

**Comportamento**  
- `DELETE /CriadorCapitulos/{id}`.
- Atualiza `chapters = chapters.filter(c => c.id !== id)`.

**Retorno**  
`Promise<void>`

</blockquote>