## üî∑ NotificationComp

O componente **NotificationComp** exibe notifica√ß√µes tempor√°rias de **erro** e **sucesso** no topo da interface. Ele √© controlado externamente via `v-model:errorMessage` e `v-model:successMessage` e emite os respectivos eventos de atualiza√ß√£o para limpar as mensagens.


### üîπVis√£o geral do fluxo
1. **Recebimento de mensagens**: quando `errorMessage` ou `successMessage` recebem um valor n√£o vazio, a notifica√ß√£o correspondente √© renderizada.
2. **Exibi√ß√£o**: a mensagem aparece no topo, com transi√ß√£o de entrada/sa√≠da (`slide-fade`) e contexto visual do Bootstrap (`alert-warning` para erro, `alert-success` para sucesso).
3. **Fechamento**:
   - **Autom√°tico**: um *timer* √© iniciado sempre que uma nova mensagem chega; ap√≥s **3 s**, a mensagem √© limpa automaticamente.
   - **Manual**: o usu√°rio pode fechar clicando no bot√£o de fechar; o componente emite `update:*` com string vazia para limpar o estado externo.

Esse fluxo permite integra√ß√£o simples: qualquer componente pai pode definir as mensagens via `v-model` e deixar o **auto-fechamento** e o **fechamento manual** a cargo do `NotificationComp`.


### üîπVari√°veis do modelo 

**Entradas controladas (via `v-model`)**

| Chave            | Tipo   | Uso                                                        |
| ---------------- | ------ | ---------------------------------------------------------- |
| `errorMessage`   | String | Mensagem de erro a exibir. Notifica√ß√£o `alert-warning`.    |
| `successMessage` | String | Mensagem de sucesso a exibir. Notifica√ß√£o `alert-success`. |


**Estado interno**

| Chave            | Tipo               | Uso                                                         |
| ---------------- | ------------------ | ----------------------------------------------------------- |
| `autoCloseTimer` | `number` \| `null` | *Handle* do `setTimeout` usado para auto-fechamento em 3 s. |

> Quando qualquer uma das mensagens muda para um valor n√£o vazio, o componente reinicia o `autoCloseTimer` e agendar√° a limpeza autom√°tica daquela mensagem.

### üîπ M√©todos e *watchers*

#### üî∏`watch.errorMessage(newVal) -> void`
<blockquote>

**Descri√ß√£o**  
Monitora mudan√ßas em `errorMessage`. Quando recebe valor n√£o vazio, limpa qualquer *timer* pendente e agenda novo *timer* de **3 s** para emitir `update:errorMessage`.

**Par√¢metros**  
- `newVal: string`

**Retorno**  
`void`
</blockquote>

#### üî∏`watch.successMessage(newVal) -> void`
<blockquote>

**Descri√ß√£o**  
Monitora mudan√ßas em `successMessage`. Quando recebe valor n√£o vazio, limpa qualquer *timer* pendente e agenda novo *timer* de **3 s** para emitir `update:successMessage`.

**Par√¢metros**  
- `newVal: string`

**Retorno**  
`void`
</blockquote>

#### üî∏`beforeUnmount() -> void`
<blockquote>

**Descri√ß√£o**  
Limpa o `autoCloseTimer` antes de o componente ser desmontado, evitando *callbacks* pendentes ap√≥s a remo√ß√£o.

**Par√¢metros**  
‚Äî  

**Retorno**  
`void`
</blockquote>