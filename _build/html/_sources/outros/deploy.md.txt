# üîµ Deploy
O deploy desse projeto √© baseado na constru√ß√£o docker desenvolvida. A seguir vamos descrever a rotina para realizar o deploy da aplica√ß√£o na AWS, considerando que altera√ß√µes foram feitas nos diferentes sistemas containers da aplica√ß√£o.


## 1. Teste e Build Localmente
O primeiro passo √© testar se o projeto funciona localmente (ou seja, sem baixar a imagem do dockerhub), atrav√©s do build da imagem local. Para isso, execute o arquivo `compose.prod.cloud.yaml`:

```bash
docker compose -f compose.prod.cloud.yaml up --build
```

Espere o servi√ßo container buildar e iniciar. Se tudo ocorrer como esperado, voc√™ deve conseguir acessar a informa√ß√£o pelo ip fornecido pelo `uvicorn` (definido como `BACKEND_PORT` no `.env`).

## 2. Envio para Docker Hub
Uma vez que a imagem tenha sido corretamente constru√≠da no passo anterior, deve-se exportar-las para o dockerhub. 

> OBS: Apenas as images de `backend` e `lo-runner` s√£o exportadas, pois o `frontend` √© utilizado apenas para realizar o build dos arquivos est√°ticos durante o in√≠cio do container. 

Primeiro, cheque a atual vers√£o das duas images com
```bash
docker images
```
Espera-se o que o seguinte formato apare√ßa:
```
REPOSITORY                      TAG             IMAGE ID       CREATED          SIZE
geradorrelatorios-backend       latest          b45ffffacba3   13 minutes ago   478MB
pdignea/relatorios              backend-v11     b45ffffacba3   13 minutes ago   478MB
pdignea/relatorios              backend-v10     0ffbcccf47eb   22 minutes ago   479MB
pdignea/relatorios              backend-v9      af3bf2244e0e   2 hours ago      479MB
geradorrelatorios-frontend      latest          367f22870f8c   2 hours ago      569MB
pdignea/relatorios              lo-runner-v1    6a1b667a0080   2 hours ago      1.02GB
geradorrelatorios-lo-runner     latest          28f8bf0c82bb   2 hours ago      1.02GB
```
- Note que as imagens que estamos interessados iniciam com `geradorrelatorios-*`. 
  
Caso voc√™ j√° tenha feito a atualiza√ß√£o via docker anteriormente, ser√° poss√≠vel encontrar a informa√ß√£o da vers√£o anterior dessas images olhando as seguintes linhas:
```
pdignea/relatorios              backend-v11     b45ffffacba3   13 minutes ago   478MB
pdignea/relatorios              lo-runner-v1    6a1b667a0080   2 hours ago      1.02GB
```
Nesse caso, a imagem `backend` est√° na vers√£o `v11` e a imagem `lo-runner` na vers√£o `v1`. 
- Caso n√£o apare√ßa essa informa√ß√£o, acesse o reposit√≥rio (privado) no dockerhub, por meio da conta de pesquisa e desenvolvimento, e procure a √∫ltima vers√£o enviada. 

Agora, vamos enviar a vers√£o atualizada das imagens para o reposit√≥rio com os seguintes comandos:
```bash
docker tag <ID_da_imagem_backend> docker.io/pdignea/relatorios:backend-v<vers√£o_backend>
docker push docker.io/pdignea/relatorios:backend-v<vers√£o_backend>

docker tag <ID_da_imagem_lo-runner> docker.io/pdignea/relatorios:lo-runner-v<vers√£o_lo-runner>
docker push docker.io/pdignea/relatorios:lo-runner-v<vers√£o_lo-runner>
```
Deve-se substituir as informa√ß√µes entre `<>`:
- O `ID_da_imagem_*` pode ser encontrado na tabela gerado por `docker image`.
- A `vers√£o` deve ser uma vers√£o acima da anterior. Exemplo, no caso acima para `backend` seria `v12` e `lo-runner` seria `v2`. 


## 3. Teste Localmente
Antes de modificar o c√≥digo em produ√ß√£o na AWS Lightsail, √© poss√≠vel testar localmente com o mesmo ambiente. 

Para isso, acesse o diret√≥rio `deploy/` e fa√ßa:
1. Altere as tags no `docker.cloud.yaml` para a vers√£o mais recentens enviadas no item anterior.
```yaml
backend:
    image: docker.io/pdignea/relatorios:backend-v<√∫ltima_vers√£o>
    ...

lo-runner:
    image: docker.io/pdignea/relatorios:lo-runner-v<√∫ltima_vers√£o>
    ...
```
2. Fa√ßa o `pull` da imagem recentemente enviada para o dockerhub
```bash
docker compose -f compose.cloud.yaml pull
```
3. Suba a imagem localmente:
```bash
docker compose -f compose.cloud.yaml up
```

Se tudo ocorrer corretamente, voc√™ deve conseguir acessar a aplica√ß√£o (como ser√° na AWS) acessando `localhost:80` em seu navegador. 

> OBS: Esse processo pode levar alguns minutos.


## 4. Deploy na AWS
Uma vez que todos os passos anteriores tenham ocorrido corretamente, podemos realizar o deploy na AWS Lightsail. Para isso, certifique-se de ter criado e estabelecido sua `publickey` (mais informa√ß√µes na em [Publickey](#publickey)
). 

Primeiro, envie todos os arquivos que forma anterados para a lightsail. Dentre eles, o `compose.cloud.yaml` sempre √© alterado, mas dependendo da sua mudan√ßa pode ser necess√°rio enviar outros arquivos. 

Para envi√°-los fa√ßa:
```bash
scp -i <caminho_para_sua_publickey> deploy/compose.cloud.yaml ubuntu@3.85.238.151:/home/ubuntu/app
```

Agora acesse a inst√¢ncia do Lightsail (via SSH ou pelo terminal online disponibilizado no site). Para maior facilidade vamos utilizar a Makefile presenten. Uma vez l√°:
1. Navegue para `/app`
```bash
cd app
```

1. Pare a execu√ß√£o atual
```bash
make stop_server
```

1. Realize o pull da imagem docker
```bash
make pull_image
```

1. Teste se a execu√ß√£o do container funciona corretamente (sem ativar execu√ß√£o cont√≠nua)
```bash
sudo docker compose -f compose.cloud.yaml up
```
Se tudo ocorrer bem e a aplica√ß√£o funcionar como esperado, realize o √∫ltimo passo. 

1. Inicie a execu√ß√£o da nova imagem
```bash
make start_server
```

Com isso, voc√™ deve conseguir acessar o site pelo ip ou dom√≠nio esperado. 



## PublicKey
Para acessar uma inst√¢ncia da AWS Lightsail via SSH ou enviar arquivos via SCP √© preciso criar uma `publickey`. Essa √© a chave que d√° acesso a m√°quina, uma vez que o lightsail n√£o define uma senha pra SSH. 

Para criar uma `publickey` acesse: 
1. https://lightsail.aws.amazon.com/ls/webapp/account/keys .
2. Crie uma par de chave de acesso
![](../_static/imgs/publickey_create.png)
3. Selecione a regi√£o da inst√¢ncia
![](../_static/imgs/publickey_region.png)
4. Defina um nome para sua chave e crie
![](../_static/imgs/publickey_name.png)
5. Fa√ßa um download da chave
![](../_static/imgs/publickey_download.png)
6. Voc√™ ir√° baixar um arquivo `.pem`. 

Voc√™ deve deix√°-lo em um lugar de f√°cil acesso. O caminho padr√£o (tanto no linux-wsl quanto no windows) √© `~/.ssh/<nome_da_chave>.pem`, o recomendado √© coloc√°-la nesse lugar. 

Quando for utilizar ssh ou scp fa√ßa da seguinte forma:
```bash
ssh -i ~/.ssh/<nome_da_chave>.pem <ip>

scp -i ~/.ssh/<nome_da_chave>.pem <arquivo1> <arquivo2>
```
